apiVersion: external-secrets.io/v1alpha1
kind: SecretStore
metadata: {}
spec:
  controller: string
  provider:
    akeyless:
      akeylessGWApiURL: string
      authSecretRef:
        kubernetesAuth:
          accessID: string
          k8sConfName: string
          secretRef:
            key: string
            name: string
            namespace: string
          serviceAccountRef:
            audiences: [] # minItems 0 of type string
            name: string
            namespace: string
        secretRef:
          accessID:
            key: string
            name: string
            namespace: string
          accessType:
            key: string
            name: string
            namespace: string
          accessTypeParam:
            key: string
            name: string
            namespace: string
      caBundle: c3RyaW5n
      caProvider:
        key: string
        name: string
        namespace: string
        type: "Secret" # "Secret", "ConfigMap"
    alibaba:
      auth:
        rrsa:
          oidcProviderArn: string
          oidcTokenFilePath: string
          roleArn: string
          sessionName: string
        secretRef:
          accessKeyIDSecretRef:
            key: string
            name: string
            namespace: string
          accessKeySecretSecretRef:
            key: string
            name: string
            namespace: string
      regionID: string
    aws:
      auth:
        jwt:
          serviceAccountRef:
            audiences: [] # minItems 0 of type string
            name: string
            namespace: string
        secretRef:
          accessKeyIDSecretRef:
            key: string
            name: string
            namespace: string
          secretAccessKeySecretRef:
            key: string
            name: string
            namespace: string
      region: string
      role: string
      service: "SecretsManager" # "SecretsManager", "ParameterStore"
    azurekv:
      authSecretRef:
        clientId:
          key: string
          name: string
          namespace: string
        clientSecret:
          key: string
          name: string
          namespace: string
      authType: "ServicePrincipal"
      identityId: string
      serviceAccountRef:
        audiences: [] # minItems 0 of type string
        name: string
        namespace: string
      tenantId: string
      vaultUrl: string
    fake:
      data:
      - key: string
        value: string
        valueMap: {}
        version: string
    gcpsm:
      auth:
        secretRef:
          secretAccessKeySecretRef:
            key: string
            name: string
            namespace: string
        workloadIdentity:
          clusterLocation: string
          clusterName: string
          clusterProjectID: string
          serviceAccountRef:
            audiences: [] # minItems 0 of type string
            name: string
            namespace: string
      projectID: string
    gitlab:
      auth:
        SecretRef:
          accessToken:
            key: string
            name: string
            namespace: string
      projectID: string
      url: string
    ibm:
      auth:
        secretRef:
          secretApiKeySecretRef:
            key: string
            name: string
            namespace: string
      serviceUrl: string
    kubernetes:
      auth:
        cert:
          clientCert:
            key: string
            name: string
            namespace: string
          clientKey:
            key: string
            name: string
            namespace: string
        serviceAccount:
          serviceAccount:
            audiences: [] # minItems 0 of type string
            name: string
            namespace: string
        token:
          bearerToken:
            key: string
            name: string
            namespace: string
      remoteNamespace: "default"
      server:
        caBundle: c3RyaW5n
        caProvider:
          key: string
          name: string
          namespace: string
          type: "Secret" # "Secret", "ConfigMap"
        url: "kubernetes.default"
    oracle:
      auth:
        secretRef:
          fingerprint:
            key: string
            name: string
            namespace: string
          privatekey:
            key: string
            name: string
            namespace: string
        tenancy: string
        user: string
      compartment: string
      encryptionKey: string
      principalType: "" # "", "UserPrincipal", "InstancePrincipal", "Workload"
      region: string
      serviceAccountRef:
        audiences: [] # minItems 0 of type string
        name: string
        namespace: string
      vault: string
    passworddepot:
      auth:
        secretRef:
          credentials:
            key: string
            name: string
            namespace: string
      database: string
      host: string
    vault:
      auth:
        appRole:
          path: "approle"
          roleId: string
          secretRef:
            key: string
            name: string
            namespace: string
        cert:
          clientCert:
            key: string
            name: string
            namespace: string
          secretRef:
            key: string
            name: string
            namespace: string
        jwt:
          kubernetesServiceAccountToken:
            audiences: [] # minItems 0 of type string
            expirationSeconds: 1
            serviceAccountRef:
              audiences: [] # minItems 0 of type string
              name: string
              namespace: string
          path: "jwt"
          role: string
          secretRef:
            key: string
            name: string
            namespace: string
        kubernetes:
          mountPath: "kubernetes"
          role: string
          secretRef:
            key: string
            name: string
            namespace: string
          serviceAccountRef:
            audiences: [] # minItems 0 of type string
            name: string
            namespace: string
        ldap:
          path: "ldap"
          secretRef:
            key: string
            name: string
            namespace: string
          username: string
        tokenSecretRef:
          key: string
          name: string
          namespace: string
      caBundle: c3RyaW5n
      caProvider:
        key: string
        name: string
        namespace: string
        type: "Secret" # "Secret", "ConfigMap"
      forwardInconsistent: true
      namespace: string
      path: string
      readYourWrites: true
      server: string
      version: "v2"
    webhook:
      body: string
      caBundle: c3RyaW5n
      caProvider:
        key: string
        name: string
        namespace: string
        type: "Secret" # "Secret", "ConfigMap"
      headers: {}
      method: string
      result:
        jsonPath: string
      secrets:
      - name: string
        secretRef:
          key: string
          name: string
          namespace: string
      timeout: string
      url: string
    yandexlockbox:
      apiEndpoint: string
      auth:
        authorizedKeySecretRef:
          key: string
          name: string
          namespace: string
      caProvider:
        certSecretRef:
          key: string
          name: string
          namespace: string
  retrySettings:
    maxRetries: 1
    retryInterval: string
status:
  conditions:
  - lastTransitionTime: 2024-10-11T12:48:44Z
    message: string
    reason: string
    status: string
    type: string
