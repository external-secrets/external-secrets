// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v6.32.1
// source: providers/v2/common/proto/provider/secretstore.proto

package provider

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// SecretStoreCapabilities defines what operations a provider supports
type SecretStoreCapabilities int32

const (
	// Provider supports read operations only
	SecretStoreCapabilities_READ_ONLY SecretStoreCapabilities = 0
	// Provider supports write operations only
	SecretStoreCapabilities_WRITE_ONLY SecretStoreCapabilities = 1
	// Provider supports both read and write operations
	SecretStoreCapabilities_READ_WRITE SecretStoreCapabilities = 2
)

// Enum value maps for SecretStoreCapabilities.
var (
	SecretStoreCapabilities_name = map[int32]string{
		0: "READ_ONLY",
		1: "WRITE_ONLY",
		2: "READ_WRITE",
	}
	SecretStoreCapabilities_value = map[string]int32{
		"READ_ONLY":  0,
		"WRITE_ONLY": 1,
		"READ_WRITE": 2,
	}
)

func (x SecretStoreCapabilities) Enum() *SecretStoreCapabilities {
	p := new(SecretStoreCapabilities)
	*p = x
	return p
}

func (x SecretStoreCapabilities) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SecretStoreCapabilities) Descriptor() protoreflect.EnumDescriptor {
	return file_providers_v2_common_proto_provider_secretstore_proto_enumTypes[0].Descriptor()
}

func (SecretStoreCapabilities) Type() protoreflect.EnumType {
	return &file_providers_v2_common_proto_provider_secretstore_proto_enumTypes[0]
}

func (x SecretStoreCapabilities) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SecretStoreCapabilities.Descriptor instead.
func (SecretStoreCapabilities) EnumDescriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{0}
}

// ProviderReference references a provider-specific configuration resource.
type ProviderReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// APIVersion of the referenced resource.
	// Example: "provider.external-secrets.io/v2alpha1"
	ApiVersion string `protobuf:"bytes,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Kind of the referenced resource.
	// Example: "Fake", "Kubernetes", "AWSSecretsManager"
	Kind string `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
	// Name of the referenced resource.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Namespace of the referenced resource.
	// If empty, the resource is cluster-scoped or resolved relative to source_namespace.
	Namespace string `protobuf:"bytes,4,opt,name=namespace,proto3" json:"namespace,omitempty"`
}

func (x *ProviderReference) Reset() {
	*x = ProviderReference{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProviderReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderReference) ProtoMessage() {}

func (x *ProviderReference) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderReference.ProtoReflect.Descriptor instead.
func (*ProviderReference) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{0}
}

func (x *ProviderReference) GetApiVersion() string {
	if x != nil {
		return x.ApiVersion
	}
	return ""
}

func (x *ProviderReference) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ProviderReference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProviderReference) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

// GetSecretRequest contains the information needed to fetch a secret
type GetSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The reference to the secret to retrieve
	RemoteRef *ExternalSecretDataRemoteRef `protobuf:"bytes,1,opt,name=remote_ref,json=remoteRef,proto3" json:"remote_ref,omitempty"`
	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,2,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// Namespace of the ExternalSecret making the request (for validation)
	SourceNamespace string `protobuf:"bytes,3,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *GetSecretRequest) Reset() {
	*x = GetSecretRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretRequest) ProtoMessage() {}

func (x *GetSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretRequest.ProtoReflect.Descriptor instead.
func (*GetSecretRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{1}
}

func (x *GetSecretRequest) GetRemoteRef() *ExternalSecretDataRemoteRef {
	if x != nil {
		return x.RemoteRef
	}
	return nil
}

func (x *GetSecretRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *GetSecretRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// GetSecretResponse contains the retrieved secret data
type GetSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The secret value as bytes
	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *GetSecretResponse) Reset() {
	*x = GetSecretResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSecretResponse) ProtoMessage() {}

func (x *GetSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSecretResponse.ProtoReflect.Descriptor instead.
func (*GetSecretResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{2}
}

func (x *GetSecretResponse) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// ExternalSecretDataRemoteRef defines how to find the secret in the provider
type ExternalSecretDataRemoteRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key is the identifier for the secret in the provider's system
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Version of the secret (optional, provider-specific)
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// Property to extract from the secret if it contains multiple values
	Property string `protobuf:"bytes,3,opt,name=property,proto3" json:"property,omitempty"`
	// DecodingStrategy specifies how to decode the secret value
	DecodingStrategy string `protobuf:"bytes,4,opt,name=decoding_strategy,json=decodingStrategy,proto3" json:"decoding_strategy,omitempty"`
	// MetadataPolicy specifies what metadata to fetch
	MetadataPolicy string `protobuf:"bytes,5,opt,name=metadata_policy,json=metadataPolicy,proto3" json:"metadata_policy,omitempty"`
}

func (x *ExternalSecretDataRemoteRef) Reset() {
	*x = ExternalSecretDataRemoteRef{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalSecretDataRemoteRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSecretDataRemoteRef) ProtoMessage() {}

func (x *ExternalSecretDataRemoteRef) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSecretDataRemoteRef.ProtoReflect.Descriptor instead.
func (*ExternalSecretDataRemoteRef) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{3}
}

func (x *ExternalSecretDataRemoteRef) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExternalSecretDataRemoteRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExternalSecretDataRemoteRef) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

func (x *ExternalSecretDataRemoteRef) GetDecodingStrategy() string {
	if x != nil {
		return x.DecodingStrategy
	}
	return ""
}

func (x *ExternalSecretDataRemoteRef) GetMetadataPolicy() string {
	if x != nil {
		return x.MetadataPolicy
	}
	return ""
}

// ValidateRequest contains the provider configuration to validate
type ValidateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// Namespace of the Provider making the request (for validation)
	SourceNamespace string `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *ValidateRequest) Reset() {
	*x = ValidateRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateRequest) ProtoMessage() {}

func (x *ValidateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateRequest.ProtoReflect.Descriptor instead.
func (*ValidateRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{4}
}

func (x *ValidateRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *ValidateRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// ValidateResponse indicates whether the provider configuration is valid
type ValidateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the validation was successful
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
	// Error message if validation failed
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// Warnings that don't prevent validation but should be surfaced to users
	Warnings []string `protobuf:"bytes,3,rep,name=warnings,proto3" json:"warnings,omitempty"`
}

func (x *ValidateResponse) Reset() {
	*x = ValidateResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ValidateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidateResponse) ProtoMessage() {}

func (x *ValidateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidateResponse.ProtoReflect.Descriptor instead.
func (*ValidateResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{5}
}

func (x *ValidateResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

func (x *ValidateResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ValidateResponse) GetWarnings() []string {
	if x != nil {
		return x.Warnings
	}
	return nil
}

// Error represents a provider error with additional context
type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Error code for programmatic handling
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Human-readable error message
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Whether the error is retryable
	Retryable bool `protobuf:"varint,3,opt,name=retryable,proto3" json:"retryable,omitempty"`
	// Additional context as key-value pairs
	Details map[string]string `protobuf:"bytes,4,rep,name=details,proto3" json:"details,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Error) GetRetryable() bool {
	if x != nil {
		return x.Retryable
	}
	return false
}

func (x *Error) GetDetails() map[string]string {
	if x != nil {
		return x.Details
	}
	return nil
}

// PushSecretRequest contains the information needed to push a secret
type PushSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// The Kubernetes secret data as a map of key-value pairs
	SecretData map[string][]byte `protobuf:"bytes,2,rep,name=secret_data,json=secretData,proto3" json:"secret_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The push secret data configuration
	PushSecretData *PushSecretData `protobuf:"bytes,3,opt,name=push_secret_data,json=pushSecretData,proto3" json:"push_secret_data,omitempty"`
	// Namespace of the PushSecret making the request (for validation)
	SourceNamespace string `protobuf:"bytes,4,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *PushSecretRequest) Reset() {
	*x = PushSecretRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSecretRequest) ProtoMessage() {}

func (x *PushSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSecretRequest.ProtoReflect.Descriptor instead.
func (*PushSecretRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{7}
}

func (x *PushSecretRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *PushSecretRequest) GetSecretData() map[string][]byte {
	if x != nil {
		return x.SecretData
	}
	return nil
}

func (x *PushSecretRequest) GetPushSecretData() *PushSecretData {
	if x != nil {
		return x.PushSecretData
	}
	return nil
}

func (x *PushSecretRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// PushSecretResponse is the response from pushing a secret
type PushSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PushSecretResponse) Reset() {
	*x = PushSecretResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSecretResponse) ProtoMessage() {}

func (x *PushSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSecretResponse.ProtoReflect.Descriptor instead.
func (*PushSecretResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{8}
}

// PushSecretData contains the configuration for pushing a secret
type PushSecretData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Metadata attached to the secret (provider-specific, stored as JSON)
	Metadata []byte `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// The key from the Kubernetes secret to push
	SecretKey string `protobuf:"bytes,2,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	// The key name in the remote provider
	RemoteKey string `protobuf:"bytes,3,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	// Property name if the remote secret supports nested values
	Property string `protobuf:"bytes,4,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *PushSecretData) Reset() {
	*x = PushSecretData{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSecretData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSecretData) ProtoMessage() {}

func (x *PushSecretData) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSecretData.ProtoReflect.Descriptor instead.
func (*PushSecretData) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{9}
}

func (x *PushSecretData) GetMetadata() []byte {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PushSecretData) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

func (x *PushSecretData) GetRemoteKey() string {
	if x != nil {
		return x.RemoteKey
	}
	return ""
}

func (x *PushSecretData) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

// DeleteSecretRequest contains the information needed to delete a secret
type DeleteSecretRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// The reference to the secret to delete
	RemoteRef *PushSecretRemoteRef `protobuf:"bytes,2,opt,name=remote_ref,json=remoteRef,proto3" json:"remote_ref,omitempty"`
	// Namespace of the PushSecret making the request (for validation)
	SourceNamespace string `protobuf:"bytes,3,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *DeleteSecretRequest) Reset() {
	*x = DeleteSecretRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecretRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretRequest) ProtoMessage() {}

func (x *DeleteSecretRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretRequest.ProtoReflect.Descriptor instead.
func (*DeleteSecretRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteSecretRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *DeleteSecretRequest) GetRemoteRef() *PushSecretRemoteRef {
	if x != nil {
		return x.RemoteRef
	}
	return nil
}

func (x *DeleteSecretRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// DeleteSecretResponse is the response from deleting a secret
type DeleteSecretResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSecretResponse) Reset() {
	*x = DeleteSecretResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteSecretResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSecretResponse) ProtoMessage() {}

func (x *DeleteSecretResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSecretResponse.ProtoReflect.Descriptor instead.
func (*DeleteSecretResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{11}
}

// PushSecretRemoteRef defines the remote reference for push/delete operations
type PushSecretRemoteRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key name in the remote provider
	RemoteKey string `protobuf:"bytes,1,opt,name=remote_key,json=remoteKey,proto3" json:"remote_key,omitempty"`
	// Property name if the remote secret supports nested values
	Property string `protobuf:"bytes,2,opt,name=property,proto3" json:"property,omitempty"`
}

func (x *PushSecretRemoteRef) Reset() {
	*x = PushSecretRemoteRef{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PushSecretRemoteRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushSecretRemoteRef) ProtoMessage() {}

func (x *PushSecretRemoteRef) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushSecretRemoteRef.ProtoReflect.Descriptor instead.
func (*PushSecretRemoteRef) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{12}
}

func (x *PushSecretRemoteRef) GetRemoteKey() string {
	if x != nil {
		return x.RemoteKey
	}
	return ""
}

func (x *PushSecretRemoteRef) GetProperty() string {
	if x != nil {
		return x.Property
	}
	return ""
}

// SecretExistsRequest contains the information needed to check if a secret exists
type SecretExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// The reference to the secret to check
	RemoteRef *PushSecretRemoteRef `protobuf:"bytes,2,opt,name=remote_ref,json=remoteRef,proto3" json:"remote_ref,omitempty"`
	// Namespace of the PushSecret making the request (for validation)
	SourceNamespace string `protobuf:"bytes,3,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *SecretExistsRequest) Reset() {
	*x = SecretExistsRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretExistsRequest) ProtoMessage() {}

func (x *SecretExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretExistsRequest.ProtoReflect.Descriptor instead.
func (*SecretExistsRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{13}
}

func (x *SecretExistsRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *SecretExistsRequest) GetRemoteRef() *PushSecretRemoteRef {
	if x != nil {
		return x.RemoteRef
	}
	return nil
}

func (x *SecretExistsRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// SecretExistsResponse contains the result of checking if a secret exists
type SecretExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the secret exists
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *SecretExistsResponse) Reset() {
	*x = SecretExistsResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SecretExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretExistsResponse) ProtoMessage() {}

func (x *SecretExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretExistsResponse.ProtoReflect.Descriptor instead.
func (*SecretExistsResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{14}
}

func (x *SecretExistsResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// GetAllSecretsRequest contains the information needed to retrieve multiple secrets
type GetAllSecretsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// The find criteria to use for selecting secrets
	Find *ExternalSecretFind `protobuf:"bytes,2,opt,name=find,proto3" json:"find,omitempty"`
	// Namespace of the ExternalSecret making the request (for validation)
	SourceNamespace string `protobuf:"bytes,3,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *GetAllSecretsRequest) Reset() {
	*x = GetAllSecretsRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllSecretsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSecretsRequest) ProtoMessage() {}

func (x *GetAllSecretsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSecretsRequest.ProtoReflect.Descriptor instead.
func (*GetAllSecretsRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{15}
}

func (x *GetAllSecretsRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *GetAllSecretsRequest) GetFind() *ExternalSecretFind {
	if x != nil {
		return x.Find
	}
	return nil
}

func (x *GetAllSecretsRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// GetAllSecretsResponse contains the retrieved secrets
type GetAllSecretsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Map of secret keys to their values
	Secrets map[string][]byte `protobuf:"bytes,1,rep,name=secrets,proto3" json:"secrets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetAllSecretsResponse) Reset() {
	*x = GetAllSecretsResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAllSecretsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllSecretsResponse) ProtoMessage() {}

func (x *GetAllSecretsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllSecretsResponse.ProtoReflect.Descriptor instead.
func (*GetAllSecretsResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{16}
}

func (x *GetAllSecretsResponse) GetSecrets() map[string][]byte {
	if x != nil {
		return x.Secrets
	}
	return nil
}

// ExternalSecretFind defines criteria for finding multiple secrets
type ExternalSecretFind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A root path to start the find operations
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Finds secrets based on the name
	Name *FindName `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Find secrets based on tags
	Tags map[string]string `protobuf:"bytes,3,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Conversion strategy for secret keys
	ConversionStrategy string `protobuf:"bytes,4,opt,name=conversion_strategy,json=conversionStrategy,proto3" json:"conversion_strategy,omitempty"`
	// Decoding strategy for secret values
	DecodingStrategy string `protobuf:"bytes,5,opt,name=decoding_strategy,json=decodingStrategy,proto3" json:"decoding_strategy,omitempty"`
}

func (x *ExternalSecretFind) Reset() {
	*x = ExternalSecretFind{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalSecretFind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalSecretFind) ProtoMessage() {}

func (x *ExternalSecretFind) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalSecretFind.ProtoReflect.Descriptor instead.
func (*ExternalSecretFind) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{17}
}

func (x *ExternalSecretFind) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExternalSecretFind) GetName() *FindName {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ExternalSecretFind) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ExternalSecretFind) GetConversionStrategy() string {
	if x != nil {
		return x.ConversionStrategy
	}
	return ""
}

func (x *ExternalSecretFind) GetDecodingStrategy() string {
	if x != nil {
		return x.DecodingStrategy
	}
	return ""
}

// FindName defines name-based criteria for finding secrets
type FindName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Regular expression to match secret names
	Regexp string `protobuf:"bytes,1,opt,name=regexp,proto3" json:"regexp,omitempty"`
}

func (x *FindName) Reset() {
	*x = FindName{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FindName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindName) ProtoMessage() {}

func (x *FindName) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindName.ProtoReflect.Descriptor instead.
func (*FindName) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{18}
}

func (x *FindName) GetRegexp() string {
	if x != nil {
		return x.Regexp
	}
	return ""
}

// CapabilitiesRequest requests the capabilities of the provider
type CapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Reference to the provider configuration CRD
	ProviderRef *ProviderReference `protobuf:"bytes,1,opt,name=provider_ref,json=providerRef,proto3" json:"provider_ref,omitempty"`
	// Namespace of the Provider making the request (for validation)
	SourceNamespace string `protobuf:"bytes,2,opt,name=source_namespace,json=sourceNamespace,proto3" json:"source_namespace,omitempty"`
}

func (x *CapabilitiesRequest) Reset() {
	*x = CapabilitiesRequest{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesRequest) ProtoMessage() {}

func (x *CapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*CapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{19}
}

func (x *CapabilitiesRequest) GetProviderRef() *ProviderReference {
	if x != nil {
		return x.ProviderRef
	}
	return nil
}

func (x *CapabilitiesRequest) GetSourceNamespace() string {
	if x != nil {
		return x.SourceNamespace
	}
	return ""
}

// CapabilitiesResponse contains the provider's capabilities
type CapabilitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The capabilities of the provider
	Capabilities SecretStoreCapabilities `protobuf:"varint,1,opt,name=capabilities,proto3,enum=provider.v1.SecretStoreCapabilities" json:"capabilities,omitempty"`
}

func (x *CapabilitiesResponse) Reset() {
	*x = CapabilitiesResponse{}
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CapabilitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CapabilitiesResponse) ProtoMessage() {}

func (x *CapabilitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_providers_v2_common_proto_provider_secretstore_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CapabilitiesResponse.ProtoReflect.Descriptor instead.
func (*CapabilitiesResponse) Descriptor() ([]byte, []int) {
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP(), []int{20}
}

func (x *CapabilitiesResponse) GetCapabilities() SecretStoreCapabilities {
	if x != nil {
		return x.Capabilities
	}
	return SecretStoreCapabilities_READ_ONLY
}

var File_providers_v2_common_proto_provider_secretstore_proto protoreflect.FileDescriptor

var file_providers_v2_common_proto_provider_secretstore_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x32, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x22, 0x7a, 0x0a, 0x11, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0xc9, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x41, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x1b, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x65, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x7f, 0x0a, 0x0f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x5a, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0xca, 0x01, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x74, 0x72, 0x79, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8,
	0x02, 0x0a, 0x11, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x45, 0x0a, 0x10, 0x70, 0x75, 0x73, 0x68,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x70, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x14, 0x0a, 0x12, 0x50, 0x75, 0x73,
	0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x86, 0x01, 0x0a, 0x0e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22,
	0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x50, 0x0a, 0x13, 0x50, 0x75, 0x73, 0x68, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x3f, 0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x66, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x22, 0x2e, 0x0a, 0x14, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x22, 0xb9, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x33, 0x0a, 0x04,
	0x66, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x66, 0x69, 0x6e,
	0x64, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x9e, 0x01, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x1a, 0x3a, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa9, 0x02,
	0x0a, 0x12, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x46, 0x69, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x46, 0x69,
	0x6e, 0x64, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x5f,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x65, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x08, 0x46, 0x69, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x65, 0x78, 0x70, 0x22, 0x83, 0x01,
	0x0a, 0x13, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x22, 0x60, 0x0a, 0x14, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x0c, 0x63,
	0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2a, 0x48, 0x0a, 0x17, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53,
	0x74, 0x6f, 0x72, 0x65, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12,
	0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x32,
	0xd0, 0x04, 0x0a, 0x13, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x75, 0x73, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d,
	0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a,
	0x0c, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x46, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x73, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2d, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x3b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_providers_v2_common_proto_provider_secretstore_proto_rawDescOnce sync.Once
	file_providers_v2_common_proto_provider_secretstore_proto_rawDescData = file_providers_v2_common_proto_provider_secretstore_proto_rawDesc
)

func file_providers_v2_common_proto_provider_secretstore_proto_rawDescGZIP() []byte {
	file_providers_v2_common_proto_provider_secretstore_proto_rawDescOnce.Do(func() {
		file_providers_v2_common_proto_provider_secretstore_proto_rawDescData = protoimpl.X.CompressGZIP(file_providers_v2_common_proto_provider_secretstore_proto_rawDescData)
	})
	return file_providers_v2_common_proto_provider_secretstore_proto_rawDescData
}

var file_providers_v2_common_proto_provider_secretstore_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_providers_v2_common_proto_provider_secretstore_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_providers_v2_common_proto_provider_secretstore_proto_goTypes = []any{
	(SecretStoreCapabilities)(0),        // 0: provider.v1.SecretStoreCapabilities
	(*ProviderReference)(nil),           // 1: provider.v1.ProviderReference
	(*GetSecretRequest)(nil),            // 2: provider.v1.GetSecretRequest
	(*GetSecretResponse)(nil),           // 3: provider.v1.GetSecretResponse
	(*ExternalSecretDataRemoteRef)(nil), // 4: provider.v1.ExternalSecretDataRemoteRef
	(*ValidateRequest)(nil),             // 5: provider.v1.ValidateRequest
	(*ValidateResponse)(nil),            // 6: provider.v1.ValidateResponse
	(*Error)(nil),                       // 7: provider.v1.Error
	(*PushSecretRequest)(nil),           // 8: provider.v1.PushSecretRequest
	(*PushSecretResponse)(nil),          // 9: provider.v1.PushSecretResponse
	(*PushSecretData)(nil),              // 10: provider.v1.PushSecretData
	(*DeleteSecretRequest)(nil),         // 11: provider.v1.DeleteSecretRequest
	(*DeleteSecretResponse)(nil),        // 12: provider.v1.DeleteSecretResponse
	(*PushSecretRemoteRef)(nil),         // 13: provider.v1.PushSecretRemoteRef
	(*SecretExistsRequest)(nil),         // 14: provider.v1.SecretExistsRequest
	(*SecretExistsResponse)(nil),        // 15: provider.v1.SecretExistsResponse
	(*GetAllSecretsRequest)(nil),        // 16: provider.v1.GetAllSecretsRequest
	(*GetAllSecretsResponse)(nil),       // 17: provider.v1.GetAllSecretsResponse
	(*ExternalSecretFind)(nil),          // 18: provider.v1.ExternalSecretFind
	(*FindName)(nil),                    // 19: provider.v1.FindName
	(*CapabilitiesRequest)(nil),         // 20: provider.v1.CapabilitiesRequest
	(*CapabilitiesResponse)(nil),        // 21: provider.v1.CapabilitiesResponse
	nil,                                 // 22: provider.v1.Error.DetailsEntry
	nil,                                 // 23: provider.v1.PushSecretRequest.SecretDataEntry
	nil,                                 // 24: provider.v1.GetAllSecretsResponse.SecretsEntry
	nil,                                 // 25: provider.v1.ExternalSecretFind.TagsEntry
}
var file_providers_v2_common_proto_provider_secretstore_proto_depIdxs = []int32{
	4,  // 0: provider.v1.GetSecretRequest.remote_ref:type_name -> provider.v1.ExternalSecretDataRemoteRef
	1,  // 1: provider.v1.GetSecretRequest.provider_ref:type_name -> provider.v1.ProviderReference
	1,  // 2: provider.v1.ValidateRequest.provider_ref:type_name -> provider.v1.ProviderReference
	22, // 3: provider.v1.Error.details:type_name -> provider.v1.Error.DetailsEntry
	1,  // 4: provider.v1.PushSecretRequest.provider_ref:type_name -> provider.v1.ProviderReference
	23, // 5: provider.v1.PushSecretRequest.secret_data:type_name -> provider.v1.PushSecretRequest.SecretDataEntry
	10, // 6: provider.v1.PushSecretRequest.push_secret_data:type_name -> provider.v1.PushSecretData
	1,  // 7: provider.v1.DeleteSecretRequest.provider_ref:type_name -> provider.v1.ProviderReference
	13, // 8: provider.v1.DeleteSecretRequest.remote_ref:type_name -> provider.v1.PushSecretRemoteRef
	1,  // 9: provider.v1.SecretExistsRequest.provider_ref:type_name -> provider.v1.ProviderReference
	13, // 10: provider.v1.SecretExistsRequest.remote_ref:type_name -> provider.v1.PushSecretRemoteRef
	1,  // 11: provider.v1.GetAllSecretsRequest.provider_ref:type_name -> provider.v1.ProviderReference
	18, // 12: provider.v1.GetAllSecretsRequest.find:type_name -> provider.v1.ExternalSecretFind
	24, // 13: provider.v1.GetAllSecretsResponse.secrets:type_name -> provider.v1.GetAllSecretsResponse.SecretsEntry
	19, // 14: provider.v1.ExternalSecretFind.name:type_name -> provider.v1.FindName
	25, // 15: provider.v1.ExternalSecretFind.tags:type_name -> provider.v1.ExternalSecretFind.TagsEntry
	1,  // 16: provider.v1.CapabilitiesRequest.provider_ref:type_name -> provider.v1.ProviderReference
	0,  // 17: provider.v1.CapabilitiesResponse.capabilities:type_name -> provider.v1.SecretStoreCapabilities
	2,  // 18: provider.v1.SecretStoreProvider.GetSecret:input_type -> provider.v1.GetSecretRequest
	8,  // 19: provider.v1.SecretStoreProvider.PushSecret:input_type -> provider.v1.PushSecretRequest
	11, // 20: provider.v1.SecretStoreProvider.DeleteSecret:input_type -> provider.v1.DeleteSecretRequest
	14, // 21: provider.v1.SecretStoreProvider.SecretExists:input_type -> provider.v1.SecretExistsRequest
	16, // 22: provider.v1.SecretStoreProvider.GetAllSecrets:input_type -> provider.v1.GetAllSecretsRequest
	5,  // 23: provider.v1.SecretStoreProvider.Validate:input_type -> provider.v1.ValidateRequest
	20, // 24: provider.v1.SecretStoreProvider.Capabilities:input_type -> provider.v1.CapabilitiesRequest
	3,  // 25: provider.v1.SecretStoreProvider.GetSecret:output_type -> provider.v1.GetSecretResponse
	9,  // 26: provider.v1.SecretStoreProvider.PushSecret:output_type -> provider.v1.PushSecretResponse
	12, // 27: provider.v1.SecretStoreProvider.DeleteSecret:output_type -> provider.v1.DeleteSecretResponse
	15, // 28: provider.v1.SecretStoreProvider.SecretExists:output_type -> provider.v1.SecretExistsResponse
	17, // 29: provider.v1.SecretStoreProvider.GetAllSecrets:output_type -> provider.v1.GetAllSecretsResponse
	6,  // 30: provider.v1.SecretStoreProvider.Validate:output_type -> provider.v1.ValidateResponse
	21, // 31: provider.v1.SecretStoreProvider.Capabilities:output_type -> provider.v1.CapabilitiesResponse
	25, // [25:32] is the sub-list for method output_type
	18, // [18:25] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_providers_v2_common_proto_provider_secretstore_proto_init() }
func file_providers_v2_common_proto_provider_secretstore_proto_init() {
	if File_providers_v2_common_proto_provider_secretstore_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_providers_v2_common_proto_provider_secretstore_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_providers_v2_common_proto_provider_secretstore_proto_goTypes,
		DependencyIndexes: file_providers_v2_common_proto_provider_secretstore_proto_depIdxs,
		EnumInfos:         file_providers_v2_common_proto_provider_secretstore_proto_enumTypes,
		MessageInfos:      file_providers_v2_common_proto_provider_secretstore_proto_msgTypes,
	}.Build()
	File_providers_v2_common_proto_provider_secretstore_proto = out.File
	file_providers_v2_common_proto_provider_secretstore_proto_rawDesc = nil
	file_providers_v2_common_proto_provider_secretstore_proto_goTypes = nil
	file_providers_v2_common_proto_provider_secretstore_proto_depIdxs = nil
}
