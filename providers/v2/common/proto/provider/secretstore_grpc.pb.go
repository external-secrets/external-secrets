// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: providers/v2/common/proto/provider/secretstore.proto

package provider

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretStoreProvider_GetSecret_FullMethodName     = "/provider.v1.SecretStoreProvider/GetSecret"
	SecretStoreProvider_PushSecret_FullMethodName    = "/provider.v1.SecretStoreProvider/PushSecret"
	SecretStoreProvider_DeleteSecret_FullMethodName  = "/provider.v1.SecretStoreProvider/DeleteSecret"
	SecretStoreProvider_SecretExists_FullMethodName  = "/provider.v1.SecretStoreProvider/SecretExists"
	SecretStoreProvider_GetAllSecrets_FullMethodName = "/provider.v1.SecretStoreProvider/GetAllSecrets"
	SecretStoreProvider_Validate_FullMethodName      = "/provider.v1.SecretStoreProvider/Validate"
	SecretStoreProvider_Capabilities_FullMethodName  = "/provider.v1.SecretStoreProvider/Capabilities"
)

// SecretStoreProviderClient is the client API for SecretStoreProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecretStoreProvider is the service interface that provider implementations must satisfy.
type SecretStoreProviderClient interface {
	// GetSecret retrieves a single secret from the provider
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	// PushSecret writes a secret to the provider
	PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretResponse, error)
	// DeleteSecret deletes a secret from the provider
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	// SecretExists checks if a secret exists in the provider
	SecretExists(ctx context.Context, in *SecretExistsRequest, opts ...grpc.CallOption) (*SecretExistsResponse, error)
	// GetAllSecrets retrieves multiple secrets based on find criteria
	GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsResponse, error)
	// Validate checks if the provider configuration is valid and the provider can be reached
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
	// Capabilities returns what operations the provider supports
	Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error)
}

type secretStoreProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretStoreProviderClient(cc grpc.ClientConnInterface) SecretStoreProviderClient {
	return &secretStoreProviderClient{cc}
}

func (c *secretStoreProviderClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushSecretResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_PushSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) SecretExists(ctx context.Context, in *SecretExistsRequest, opts ...grpc.CallOption) (*SecretExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretExistsResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_SecretExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSecretsResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_GetAllSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretStoreProviderClient) Capabilities(ctx context.Context, in *CapabilitiesRequest, opts ...grpc.CallOption) (*CapabilitiesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CapabilitiesResponse)
	err := c.cc.Invoke(ctx, SecretStoreProvider_Capabilities_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretStoreProviderServer is the server API for SecretStoreProvider service.
// All implementations must embed UnimplementedSecretStoreProviderServer
// for forward compatibility.
//
// SecretStoreProvider is the service interface that provider implementations must satisfy.
type SecretStoreProviderServer interface {
	// GetSecret retrieves a single secret from the provider
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	// PushSecret writes a secret to the provider
	PushSecret(context.Context, *PushSecretRequest) (*PushSecretResponse, error)
	// DeleteSecret deletes a secret from the provider
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// SecretExists checks if a secret exists in the provider
	SecretExists(context.Context, *SecretExistsRequest) (*SecretExistsResponse, error)
	// GetAllSecrets retrieves multiple secrets based on find criteria
	GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsResponse, error)
	// Validate checks if the provider configuration is valid and the provider can be reached
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
	// Capabilities returns what operations the provider supports
	Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error)
	mustEmbedUnimplementedSecretStoreProviderServer()
}

// UnimplementedSecretStoreProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretStoreProviderServer struct{}

func (UnimplementedSecretStoreProviderServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedSecretStoreProviderServer) PushSecret(context.Context, *PushSecretRequest) (*PushSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSecret not implemented")
}
func (UnimplementedSecretStoreProviderServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretStoreProviderServer) SecretExists(context.Context, *SecretExistsRequest) (*SecretExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretExists not implemented")
}
func (UnimplementedSecretStoreProviderServer) GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSecrets not implemented")
}
func (UnimplementedSecretStoreProviderServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedSecretStoreProviderServer) Capabilities(context.Context, *CapabilitiesRequest) (*CapabilitiesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Capabilities not implemented")
}
func (UnimplementedSecretStoreProviderServer) mustEmbedUnimplementedSecretStoreProviderServer() {}
func (UnimplementedSecretStoreProviderServer) testEmbeddedByValue()                             {}

// UnsafeSecretStoreProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretStoreProviderServer will
// result in compilation errors.
type UnsafeSecretStoreProviderServer interface {
	mustEmbedUnimplementedSecretStoreProviderServer()
}

func RegisterSecretStoreProviderServer(s grpc.ServiceRegistrar, srv SecretStoreProviderServer) {
	// If the following call pancis, it indicates UnimplementedSecretStoreProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretStoreProvider_ServiceDesc, srv)
}

func _SecretStoreProvider_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_PushSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).PushSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_PushSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).PushSecret(ctx, req.(*PushSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_SecretExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).SecretExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_SecretExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).SecretExists(ctx, req.(*SecretExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_GetAllSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).GetAllSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_GetAllSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).GetAllSecrets(ctx, req.(*GetAllSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretStoreProvider_Capabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CapabilitiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretStoreProviderServer).Capabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretStoreProvider_Capabilities_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretStoreProviderServer).Capabilities(ctx, req.(*CapabilitiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretStoreProvider_ServiceDesc is the grpc.ServiceDesc for SecretStoreProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretStoreProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "provider.v1.SecretStoreProvider",
	HandlerType: (*SecretStoreProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSecret",
			Handler:    _SecretStoreProvider_GetSecret_Handler,
		},
		{
			MethodName: "PushSecret",
			Handler:    _SecretStoreProvider_PushSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretStoreProvider_DeleteSecret_Handler,
		},
		{
			MethodName: "SecretExists",
			Handler:    _SecretStoreProvider_SecretExists_Handler,
		},
		{
			MethodName: "GetAllSecrets",
			Handler:    _SecretStoreProvider_GetAllSecrets_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _SecretStoreProvider_Validate_Handler,
		},
		{
			MethodName: "Capabilities",
			Handler:    _SecretStoreProvider_Capabilities_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers/v2/common/proto/provider/secretstore.proto",
}
