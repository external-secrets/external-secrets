syntax = "proto3";

package provider.v1;

option go_package = "github.com/external-secrets/external-secrets/proto/provider;provider";

// SecretStoreProvider is the service interface that provider implementations must satisfy.
service SecretStoreProvider {
  // GetSecret retrieves a single secret from the provider
  rpc GetSecret(GetSecretRequest) returns (GetSecretResponse);
  
  // PushSecret writes a secret to the provider
  rpc PushSecret(PushSecretRequest) returns (PushSecretResponse);
  
  // DeleteSecret deletes a secret from the provider
  rpc DeleteSecret(DeleteSecretRequest) returns (DeleteSecretResponse);
  
  // SecretExists checks if a secret exists in the provider
  rpc SecretExists(SecretExistsRequest) returns (SecretExistsResponse);
  
  // GetAllSecrets retrieves multiple secrets based on find criteria
  rpc GetAllSecrets(GetAllSecretsRequest) returns (GetAllSecretsResponse);
  
  // Validate checks if the provider configuration is valid and the provider can be reached
  rpc Validate(ValidateRequest) returns (ValidateResponse);
  
  // Capabilities returns what operations the provider supports
  rpc Capabilities(CapabilitiesRequest) returns (CapabilitiesResponse);
}

// ProviderReference references a provider-specific configuration resource.
message ProviderReference {
  // APIVersion of the referenced resource.
  // Example: "provider.external-secrets.io/v2alpha1"
  string api_version = 1;
  
  // Kind of the referenced resource.
  // Example: "Fake", "Kubernetes", "AWSSecretsManager"
  string kind = 2;
  
  // Name of the referenced resource.
  string name = 3;
  
  // Namespace of the referenced resource.
  // If empty, the resource is cluster-scoped or resolved relative to source_namespace.
  string namespace = 4;
}

// GetSecretRequest contains the information needed to fetch a secret
message GetSecretRequest {
  // The reference to the secret to retrieve
  ExternalSecretDataRemoteRef remote_ref = 1;
  
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 2;
  
  // Namespace of the ExternalSecret making the request (for validation)
  string source_namespace = 3;
}

// GetSecretResponse contains the retrieved secret data
message GetSecretResponse {
  // The secret value as bytes
  bytes value = 1;
}

// ExternalSecretDataRemoteRef defines how to find the secret in the provider
message ExternalSecretDataRemoteRef {
  // Key is the identifier for the secret in the provider's system
  string key = 1;
  
  // Version of the secret (optional, provider-specific)
  string version = 2;
  
  // Property to extract from the secret if it contains multiple values
  string property = 3;
  
  // DecodingStrategy specifies how to decode the secret value
  string decoding_strategy = 4;
  
  // MetadataPolicy specifies what metadata to fetch
  string metadata_policy = 5;
}

// ValidateRequest contains the provider configuration to validate
message ValidateRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // Namespace of the Provider making the request (for validation)
  string source_namespace = 2;
}

// ValidateResponse indicates whether the provider configuration is valid
message ValidateResponse {
  // Whether the validation was successful
  bool valid = 1;
  
  // Error message if validation failed
  string error = 2;
  
  // Warnings that don't prevent validation but should be surfaced to users
  repeated string warnings = 3;
}

// Error represents a provider error with additional context
message Error {
  // Error code for programmatic handling
  string code = 1;
  
  // Human-readable error message
  string message = 2;
  
  // Whether the error is retryable
  bool retryable = 3;
  
  // Additional context as key-value pairs
  map<string, string> details = 4;
}

// PushSecretRequest contains the information needed to push a secret
message PushSecretRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // The Kubernetes secret data as a map of key-value pairs
  map<string, bytes> secret_data = 2;
  
  // The push secret data configuration
  PushSecretData push_secret_data = 3;
  
  // Namespace of the PushSecret making the request (for validation)
  string source_namespace = 4;
}

// PushSecretResponse is the response from pushing a secret
message PushSecretResponse {
  // Empty response - errors are communicated via gRPC status
}

// PushSecretData contains the configuration for pushing a secret
message PushSecretData {
  // Metadata attached to the secret (provider-specific, stored as JSON)
  bytes metadata = 1;
  
  // The key from the Kubernetes secret to push
  string secret_key = 2;
  
  // The key name in the remote provider
  string remote_key = 3;
  
  // Property name if the remote secret supports nested values
  string property = 4;
}

// DeleteSecretRequest contains the information needed to delete a secret
message DeleteSecretRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // The reference to the secret to delete
  PushSecretRemoteRef remote_ref = 2;
  
  // Namespace of the PushSecret making the request (for validation)
  string source_namespace = 3;
}

// DeleteSecretResponse is the response from deleting a secret
message DeleteSecretResponse {
  // Empty response - errors are communicated via gRPC status
}

// PushSecretRemoteRef defines the remote reference for push/delete operations
message PushSecretRemoteRef {
  // The key name in the remote provider
  string remote_key = 1;
  
  // Property name if the remote secret supports nested values
  string property = 2;
}

// SecretExistsRequest contains the information needed to check if a secret exists
message SecretExistsRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // The reference to the secret to check
  PushSecretRemoteRef remote_ref = 2;
  
  // Namespace of the PushSecret making the request (for validation)
  string source_namespace = 3;
}

// SecretExistsResponse contains the result of checking if a secret exists
message SecretExistsResponse {
  // Whether the secret exists
  bool exists = 1;
}

// GetAllSecretsRequest contains the information needed to retrieve multiple secrets
message GetAllSecretsRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // The find criteria to use for selecting secrets
  ExternalSecretFind find = 2;
  
  // Namespace of the ExternalSecret making the request (for validation)
  string source_namespace = 3;
}

// GetAllSecretsResponse contains the retrieved secrets
message GetAllSecretsResponse {
  // Map of secret keys to their values
  map<string, bytes> secrets = 1;
}

// ExternalSecretFind defines criteria for finding multiple secrets
message ExternalSecretFind {
  // A root path to start the find operations
  string path = 1;
  
  // Finds secrets based on the name
  FindName name = 2;
  
  // Find secrets based on tags
  map<string, string> tags = 3;
  
  // Conversion strategy for secret keys
  string conversion_strategy = 4;
  
  // Decoding strategy for secret values
  string decoding_strategy = 5;
}

// FindName defines name-based criteria for finding secrets
message FindName {
  // Regular expression to match secret names
  string regexp = 1;
}

// CapabilitiesRequest requests the capabilities of the provider
message CapabilitiesRequest {
  // Reference to the provider configuration CRD
  ProviderReference provider_ref = 1;
  
  // Namespace of the Provider making the request (for validation)
  string source_namespace = 2;
}

// CapabilitiesResponse contains the provider's capabilities
message CapabilitiesResponse {
  // The capabilities of the provider
  SecretStoreCapabilities capabilities = 1;
}

// SecretStoreCapabilities defines what operations a provider supports
enum SecretStoreCapabilities {
  // Provider supports read operations only
  READ_ONLY = 0;
  
  // Provider supports write operations only
  WRITE_ONLY = 1;
  
  // Provider supports both read and write operations
  READ_WRITE = 2;
}
