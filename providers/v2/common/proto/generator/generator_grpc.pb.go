// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: providers/v2/common/proto/generator/generator.proto

package generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GeneratorProvider_Generate_FullMethodName = "/generator.v1.GeneratorProvider/Generate"
	GeneratorProvider_Cleanup_FullMethodName  = "/generator.v1.GeneratorProvider/Cleanup"
)

// GeneratorProviderClient is the client API for GeneratorProvider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GeneratorProvider is the service interface that generator implementations must satisfy.
type GeneratorProviderClient interface {
	// Generate creates a new secret or set of secrets.
	// The returned map is a mapping of secret names to their respective values.
	// The state is an optional field that can be used to store any generator-specific
	// state which can be used during the Cleanup phase.
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error)
	// Cleanup deletes any resources created during the Generate phase.
	// Cleanup is idempotent and should not return an error if the resources
	// have already been deleted.
	Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error)
}

type generatorProviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorProviderClient(cc grpc.ClientConnInterface) GeneratorProviderClient {
	return &generatorProviderClient{cc}
}

func (c *generatorProviderClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (*GenerateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GenerateResponse)
	err := c.cc.Invoke(ctx, GeneratorProvider_Generate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generatorProviderClient) Cleanup(ctx context.Context, in *CleanupRequest, opts ...grpc.CallOption) (*CleanupResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CleanupResponse)
	err := c.cc.Invoke(ctx, GeneratorProvider_Cleanup_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratorProviderServer is the server API for GeneratorProvider service.
// All implementations must embed UnimplementedGeneratorProviderServer
// for forward compatibility.
//
// GeneratorProvider is the service interface that generator implementations must satisfy.
type GeneratorProviderServer interface {
	// Generate creates a new secret or set of secrets.
	// The returned map is a mapping of secret names to their respective values.
	// The state is an optional field that can be used to store any generator-specific
	// state which can be used during the Cleanup phase.
	Generate(context.Context, *GenerateRequest) (*GenerateResponse, error)
	// Cleanup deletes any resources created during the Generate phase.
	// Cleanup is idempotent and should not return an error if the resources
	// have already been deleted.
	Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error)
	mustEmbedUnimplementedGeneratorProviderServer()
}

// UnimplementedGeneratorProviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeneratorProviderServer struct{}

func (UnimplementedGeneratorProviderServer) Generate(context.Context, *GenerateRequest) (*GenerateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedGeneratorProviderServer) Cleanup(context.Context, *CleanupRequest) (*CleanupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cleanup not implemented")
}
func (UnimplementedGeneratorProviderServer) mustEmbedUnimplementedGeneratorProviderServer() {}
func (UnimplementedGeneratorProviderServer) testEmbeddedByValue()                           {}

// UnsafeGeneratorProviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorProviderServer will
// result in compilation errors.
type UnsafeGeneratorProviderServer interface {
	mustEmbedUnimplementedGeneratorProviderServer()
}

func RegisterGeneratorProviderServer(s grpc.ServiceRegistrar, srv GeneratorProviderServer) {
	// If the following call pancis, it indicates UnimplementedGeneratorProviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GeneratorProvider_ServiceDesc, srv)
}

func _GeneratorProvider_Generate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorProviderServer).Generate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorProvider_Generate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorProviderServer).Generate(ctx, req.(*GenerateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GeneratorProvider_Cleanup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorProviderServer).Cleanup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorProvider_Cleanup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorProviderServer).Cleanup(ctx, req.(*CleanupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneratorProvider_ServiceDesc is the grpc.ServiceDesc for GeneratorProvider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneratorProvider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generator.v1.GeneratorProvider",
	HandlerType: (*GeneratorProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Generate",
			Handler:    _GeneratorProvider_Generate_Handler,
		},
		{
			MethodName: "Cleanup",
			Handler:    _GeneratorProvider_Cleanup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "providers/v2/common/proto/generator/generator.proto",
}
