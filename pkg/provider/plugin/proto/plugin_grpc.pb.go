//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: plugin.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SecretsPluginService_GetInfo_FullMethodName       = "/plugin.SecretsPluginService/GetInfo"
	SecretsPluginService_GetSecret_FullMethodName     = "/plugin.SecretsPluginService/GetSecret"
	SecretsPluginService_GetSecretMap_FullMethodName  = "/plugin.SecretsPluginService/GetSecretMap"
	SecretsPluginService_GetAllSecrets_FullMethodName = "/plugin.SecretsPluginService/GetAllSecrets"
	SecretsPluginService_PushSecret_FullMethodName    = "/plugin.SecretsPluginService/PushSecret"
	SecretsPluginService_DeleteSecret_FullMethodName  = "/plugin.SecretsPluginService/DeleteSecret"
	SecretsPluginService_SecretExists_FullMethodName  = "/plugin.SecretsPluginService/SecretExists"
	SecretsPluginService_Validate_FullMethodName      = "/plugin.SecretsPluginService/Validate"
)

// SecretsPluginServiceClient is the client API for SecretsPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// SecretsPlugin defines the gRPC interface for external secret plugins.
type SecretsPluginServiceClient interface {
	// GetInfo returns plugin information and capabilities.
	GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error)
	// GetSecret retrieves a single secret from the plugin.
	GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error)
	// GetSecretMap retrieves multiple key-value pairs from the plugin.
	GetSecretMap(ctx context.Context, in *GetSecretMapRequest, opts ...grpc.CallOption) (*GetSecretMapResponse, error)
	// GetAllSecrets retrieves all secrets matching the given criteria.
	GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsResponse, error)
	// PushSecret writes a secret to the plugin.
	PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretResponse, error)
	// DeleteSecret deletes a secret from the plugin.
	DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error)
	// SecretExists checks if a secret exists in the plugin.
	SecretExists(ctx context.Context, in *SecretExistsRequest, opts ...grpc.CallOption) (*SecretExistsResponse, error)
	// Validate validates the plugin configuration.
	Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error)
}

type secretsPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretsPluginServiceClient(cc grpc.ClientConnInterface) SecretsPluginServiceClient {
	return &secretsPluginServiceClient{cc}
}

func (c *secretsPluginServiceClient) GetInfo(ctx context.Context, in *GetInfoRequest, opts ...grpc.CallOption) (*GetInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetInfoResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_GetInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) GetSecret(ctx context.Context, in *GetSecretRequest, opts ...grpc.CallOption) (*GetSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_GetSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) GetSecretMap(ctx context.Context, in *GetSecretMapRequest, opts ...grpc.CallOption) (*GetSecretMapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSecretMapResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_GetSecretMap_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) GetAllSecrets(ctx context.Context, in *GetAllSecretsRequest, opts ...grpc.CallOption) (*GetAllSecretsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllSecretsResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_GetAllSecrets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) PushSecret(ctx context.Context, in *PushSecretRequest, opts ...grpc.CallOption) (*PushSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushSecretResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_PushSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) DeleteSecret(ctx context.Context, in *DeleteSecretRequest, opts ...grpc.CallOption) (*DeleteSecretResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteSecretResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_DeleteSecret_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) SecretExists(ctx context.Context, in *SecretExistsRequest, opts ...grpc.CallOption) (*SecretExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SecretExistsResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_SecretExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretsPluginServiceClient) Validate(ctx context.Context, in *ValidateRequest, opts ...grpc.CallOption) (*ValidateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidateResponse)
	err := c.cc.Invoke(ctx, SecretsPluginService_Validate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretsPluginServiceServer is the server API for SecretsPluginService service.
// All implementations should embed UnimplementedSecretsPluginServiceServer
// for forward compatibility.
//
// SecretsPlugin defines the gRPC interface for external secret plugins.
type SecretsPluginServiceServer interface {
	// GetInfo returns plugin information and capabilities.
	GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error)
	// GetSecret retrieves a single secret from the plugin.
	GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error)
	// GetSecretMap retrieves multiple key-value pairs from the plugin.
	GetSecretMap(context.Context, *GetSecretMapRequest) (*GetSecretMapResponse, error)
	// GetAllSecrets retrieves all secrets matching the given criteria.
	GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsResponse, error)
	// PushSecret writes a secret to the plugin.
	PushSecret(context.Context, *PushSecretRequest) (*PushSecretResponse, error)
	// DeleteSecret deletes a secret from the plugin.
	DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error)
	// SecretExists checks if a secret exists in the plugin.
	SecretExists(context.Context, *SecretExistsRequest) (*SecretExistsResponse, error)
	// Validate validates the plugin configuration.
	Validate(context.Context, *ValidateRequest) (*ValidateResponse, error)
}

// UnimplementedSecretsPluginServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSecretsPluginServiceServer struct{}

func (UnimplementedSecretsPluginServiceServer) GetInfo(context.Context, *GetInfoRequest) (*GetInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInfo not implemented")
}
func (UnimplementedSecretsPluginServiceServer) GetSecret(context.Context, *GetSecretRequest) (*GetSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedSecretsPluginServiceServer) GetSecretMap(context.Context, *GetSecretMapRequest) (*GetSecretMapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretMap not implemented")
}
func (UnimplementedSecretsPluginServiceServer) GetAllSecrets(context.Context, *GetAllSecretsRequest) (*GetAllSecretsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSecrets not implemented")
}
func (UnimplementedSecretsPluginServiceServer) PushSecret(context.Context, *PushSecretRequest) (*PushSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushSecret not implemented")
}
func (UnimplementedSecretsPluginServiceServer) DeleteSecret(context.Context, *DeleteSecretRequest) (*DeleteSecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedSecretsPluginServiceServer) SecretExists(context.Context, *SecretExistsRequest) (*SecretExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SecretExists not implemented")
}
func (UnimplementedSecretsPluginServiceServer) Validate(context.Context, *ValidateRequest) (*ValidateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validate not implemented")
}
func (UnimplementedSecretsPluginServiceServer) testEmbeddedByValue() {}

// UnsafeSecretsPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretsPluginServiceServer will
// result in compilation errors.
type UnsafeSecretsPluginServiceServer interface {
	mustEmbedUnimplementedSecretsPluginServiceServer()
}

func RegisterSecretsPluginServiceServer(s grpc.ServiceRegistrar, srv SecretsPluginServiceServer) {
	// If the following call pancis, it indicates UnimplementedSecretsPluginServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SecretsPluginService_ServiceDesc, srv)
}

func _SecretsPluginService_GetInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).GetInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_GetInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).GetInfo(ctx, req.(*GetInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).GetSecret(ctx, req.(*GetSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_GetSecretMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretMapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).GetSecretMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_GetSecretMap_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).GetSecretMap(ctx, req.(*GetSecretMapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_GetAllSecrets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSecretsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).GetAllSecrets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_GetAllSecrets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).GetAllSecrets(ctx, req.(*GetAllSecretsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_PushSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).PushSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_PushSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).PushSecret(ctx, req.(*PushSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_DeleteSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).DeleteSecret(ctx, req.(*DeleteSecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_SecretExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).SecretExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_SecretExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).SecretExists(ctx, req.(*SecretExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretsPluginService_Validate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretsPluginServiceServer).Validate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretsPluginService_Validate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretsPluginServiceServer).Validate(ctx, req.(*ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretsPluginService_ServiceDesc is the grpc.ServiceDesc for SecretsPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretsPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugin.SecretsPluginService",
	HandlerType: (*SecretsPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInfo",
			Handler:    _SecretsPluginService_GetInfo_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _SecretsPluginService_GetSecret_Handler,
		},
		{
			MethodName: "GetSecretMap",
			Handler:    _SecretsPluginService_GetSecretMap_Handler,
		},
		{
			MethodName: "GetAllSecrets",
			Handler:    _SecretsPluginService_GetAllSecrets_Handler,
		},
		{
			MethodName: "PushSecret",
			Handler:    _SecretsPluginService_PushSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _SecretsPluginService_DeleteSecret_Handler,
		},
		{
			MethodName: "SecretExists",
			Handler:    _SecretsPluginService_SecretExists_Handler,
		},
		{
			MethodName: "Validate",
			Handler:    _SecretsPluginService_Validate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugin.proto",
}
