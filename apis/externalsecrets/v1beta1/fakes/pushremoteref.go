// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/external-secrets/external-secrets/apis/externalsecrets/v1beta1"
)

type PushRemoteRef struct {
	GetRemoteKeyStub        func() string
	getRemoteKeyMutex       sync.RWMutex
	getRemoteKeyArgsForCall []struct {
	}
	getRemoteKeyReturns struct {
		result1 string
	}
	getRemoteKeyReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *PushRemoteRef) GetRemoteKey() string {
	fake.getRemoteKeyMutex.Lock()
	ret, specificReturn := fake.getRemoteKeyReturnsOnCall[len(fake.getRemoteKeyArgsForCall)]
	fake.getRemoteKeyArgsForCall = append(fake.getRemoteKeyArgsForCall, struct {
	}{})
	stub := fake.GetRemoteKeyStub
	fakeReturns := fake.getRemoteKeyReturns
	fake.recordInvocation("GetRemoteKey", []interface{}{})
	fake.getRemoteKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *PushRemoteRef) GetRemoteKeyCallCount() int {
	fake.getRemoteKeyMutex.RLock()
	defer fake.getRemoteKeyMutex.RUnlock()
	return len(fake.getRemoteKeyArgsForCall)
}

func (fake *PushRemoteRef) GetRemoteKeyCalls(stub func() string) {
	fake.getRemoteKeyMutex.Lock()
	defer fake.getRemoteKeyMutex.Unlock()
	fake.GetRemoteKeyStub = stub
}

func (fake *PushRemoteRef) GetRemoteKeyReturns(result1 string) {
	fake.getRemoteKeyMutex.Lock()
	defer fake.getRemoteKeyMutex.Unlock()
	fake.GetRemoteKeyStub = nil
	fake.getRemoteKeyReturns = struct {
		result1 string
	}{result1}
}

func (fake *PushRemoteRef) GetRemoteKeyReturnsOnCall(i int, result1 string) {
	fake.getRemoteKeyMutex.Lock()
	defer fake.getRemoteKeyMutex.Unlock()
	fake.GetRemoteKeyStub = nil
	if fake.getRemoteKeyReturnsOnCall == nil {
		fake.getRemoteKeyReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getRemoteKeyReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *PushRemoteRef) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRemoteKeyMutex.RLock()
	defer fake.getRemoteKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *PushRemoteRef) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ v1beta1.PushRemoteRef = new(PushRemoteRef)
